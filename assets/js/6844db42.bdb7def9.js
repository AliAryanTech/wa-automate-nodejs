"use strict";(self.webpackChunkdocs_v_3=self.webpackChunkdocs_v_3||[]).push([[4352],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>d});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),c=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(i.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=c(t),d=o,m=h["".concat(i,".").concat(d)]||h[d]||u[d]||a;return t?n.createElement(m,s(s({ref:r},p),{},{components:t})):n.createElement(m,s({ref:r},p))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=h;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var c=2;c<a;c++)s[c]=t[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},8496:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=t(7462),o=(t(7294),t(3905));const a={},s="Error Handling",l={unversionedId:"how-to/handle-errors",id:"how-to/handle-errors",title:"Error Handling",description:"Keep your promises!",source:"@site/docs/how-to/handle-errors.md",sourceDirName:"how-to",slug:"/how-to/handle-errors",permalink:"/docs/how-to/handle-errors",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/how-to/handle-errors.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Group",permalink:"/docs/how-to/groups"},next:{title:"Handle Incoming Call",permalink:"/docs/how-to/incoming-calls"}},i={},c=[{value:"Keep your promises!",id:"keep-your-promises",level:2},{value:"Error handling on <code>create</code>",id:"error-handling-on-create",level:2},{value:"Manage page errors",id:"manage-page-errors",level:2},{value:"Kill the session",id:"kill-the-session",level:2}],p={toc:c};function u(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"error-handling"},"Error Handling"),(0,o.kt)("h2",{id:"keep-your-promises"},"Keep your promises!"),(0,o.kt)("p",null,"Treat all ",(0,o.kt)("inlineCode",{parentName:"p"},"client")," methods as promises. Therefore make sure to await them and wrap them in ",(0,o.kt)("inlineCode",{parentName:"p"},"try/catch")," blocks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"    client.onMessage(async message => {\n        try{\n            //respond with 'Hi!'\n            await client.sendText(message.from, 'Hi!');\n        } catch(error){\n            console.log(error);\n        }\n    })\n\n")),(0,o.kt)("h2",{id:"error-handling-on-create"},"Error handling on ",(0,o.kt)("inlineCode",{parentName:"h2"},"create")),(0,o.kt)("p",null,"The [","[create]","] method itself is a promise so you can handle errors using a try catch block here also from which you can choose to try again or exit the process."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"async function start(client){\n    ...\n}\n\nasync function launch(){\n    try{\n        const client = await create();\n        await start(client);\n    } catch(error){\n        console.log(errror)\n    }\n}\n\nlaunch();\n\n")),(0,o.kt)("p",null,'Alternatively, you can set the client "start" function (the function that consumes the client after it has been created) as a config variable [',"[restartOnCrash]","], allowing the process itself to restart/retry if there are any issues. Be careful with this as it may lead to an endless loop."),(0,o.kt)("p",null,"You can also use [","[logConsole]","] (logs all browser console output) or just [","[logConsoleErrors]","] (only logs browser errors) to better debug issues."),(0,o.kt)("p",null,"Setting [","[killProcessOnBrowserClose]","] to true will kill the whole node process upon any critical browser issue (maybe the browser runs out of memory and crashes, this option will kill the process)."),(0,o.kt)("p",null,"This is useful if you have a n orchestrator process that restarts processes. (e.g ",(0,o.kt)("a",{parentName:"p",href:"https://pm2.keymetrics.io/"},"pm2")," or a ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/config/containers/start-containers-automatically/#:~:text=Restart%20policy%20details,-Keep%20the%20following&text=A%20restart%20policy%20only%20takes,going%20into%20a%20restart%20loop."},"docker restart policy"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"async function start(client){\n    ...\n}\n\nasync function launch(){\n    try{\n        const client = await create({\n            //sets restartOnCrash to the above `start` function\n            restartOnCrash: start,\n\n            //log all browser console output\n            logConsole: true,\n\n            //or just browser errors\n            logConsoleErrors: true,\n\n            //kill the process if the browser crashes/is closed manually\n            killProcessOnBrowserClose: true\n        });\n        await start(client);\n    } catch(error){\n        console.log(error)\n    }\n}\n\nlaunch();\n")),(0,o.kt)("h2",{id:"manage-page-errors"},"Manage page errors"),(0,o.kt)("p",null,"Since this project is built upon puppeteer, you can access the ",(0,o.kt)("a",{parentName:"p",href:"https://pptr.dev/#?product=Puppeteer&version=v2.0.0&show=api-class-page"},"Puppeteer Page")," instance by referencing ",(0,o.kt)("inlineCode",{parentName:"p"},"client.getPage()"),", and then therefore you can listen to any errors on the page like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"client.getPage().on('error', _=>{\n...\n}\n")),(0,o.kt)("h2",{id:"kill-the-session"},"Kill the session"),(0,o.kt)("p",null,"As of v1.6.6^ you can now kill the session when required. Best practice is to manage trycatch-es yourself and kill the client on catch."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"try{\n...\nawait client.sendMessage(...\n...\n} catch(error){\nclient.kill();\n//maybe restart the session then\n}\n")))}u.isMDXComponent=!0}}]);