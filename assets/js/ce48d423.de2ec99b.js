"use strict";(self.webpackChunkdocs_v_3=self.webpackChunkdocs_v_3||[]).push([[1589],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={},i="Reacting To Group Events",c={unversionedId:"how-to/react-to-group-events",id:"how-to/react-to-group-events",title:"Reacting To Group Events",description:"For a specific group you can use [[onParticipantsChanged]], this will fire all detectable group participant change events (see: [[ParticipantChangedEventModel]]).",source:"@site/docs/how-to/react-to-group-events.md",sourceDirName:"how-to",slug:"/how-to/react-to-group-events",permalink:"/docs/how-to/react-to-group-events",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/how-to/react-to-group-events.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"More examples",permalink:"/docs/how-to/misc"},next:{title:"read-state",permalink:"/docs/how-to/read-state"}},s={},l=[{value:"Listening to participant change events from all groups",id:"listening-to-participant-change-events-from-all-groups",level:2}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"reacting-to-group-events"},"Reacting To Group Events"),(0,r.kt)("p",null,"For a specific group you can use [","[onParticipantsChanged]","], this will fire all detectable group participant change events (see: [","[ParticipantChangedEventModel]","])."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {\n  create,\n  Client,\n  ParticipantChangedEventModel,\n} from "@open-wa/wa-automate";\n\nfunction start(client: Client) {\n  const groupChatId = "00000000000-11111111111@g.us";\n  client.onParticipantsChanged(\n    groupChatId,\n    async (changeEvent: ParticipantChangedEventModel) => {\n      if (changeEvent.action == "add") {\n        // It is possible that multiple accounts get added\n        await Promise.all(\n          changeEvent.who.map((number) =>\n            client.sendTextWithMentions(\n              groupChatId,\n              `@${number} has been added!`\n            )\n          )\n        );\n      }\n      if (changeEvent.action == "remove") {\n        // It is possible that multiple accounts get removed\n        //remember: all client methods are promises!\n        await Promise.all(\n          changeEvent.who.map((number) =>\n            client.sendTextWithMentions(\n              groupChatId,\n              `@${number} has been removed!`\n            )\n          )\n        );\n      }\n    }\n  );\n}\n\ncreate().then((client) => start(client));\n')),(0,r.kt)("h2",{id:"listening-to-participant-change-events-from-all-groups"},"Listening to participant change events from all groups"),(0,r.kt)("p",null,"If you want to listen to participant change requests from all groups, you can get a list of all groups [","[getAllChatIds]","], filter for groups ",(0,r.kt)("inlineCode",{parentName:"p"},".filter(id=>id.includes('@g.us')")," then use the above method. However this results in multiple listeners in the browser and can have detrimental performance implications."),(0,r.kt)("p",null,"For better performance and stability you can use the Insiders Feature [","[onGlobalParticipantsChanged]","]."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {\n  create,\n  Client,\n  ParticipantChangedEventModel,\n} from "@open-wa/wa-automate";\n\nfunction start(client: Client) {\n  client.onGlobalParticipantsChanged(\n    async (changeEvent: ParticipantChangedEventModel) => {\n      if (changeEvent.action == "add") {\n        // It is possible that multiple accounts get added\n        await Promise.all(\n          changeEvent.who.map((number) =>\n            client.sendTextWithMentions(\n              changeEvent.chat,\n              `@${number} has been added!`\n            )\n          )\n        );\n      }\n      if (changeEvent.action == "remove") {\n        // It is possible that multiple accounts get removed\n        //remember: all client methods are promises!\n        await Promise.all(\n          changeEvent.who.map((number) =>\n            client.sendTextWithMentions(\n              changeEvent.chat,\n              `@${number} has been removed!`\n            )\n          )\n        );\n      }\n    }\n  );\n}\n\ncreate().then((client) => start(client));\n')))}u.isMDXComponent=!0}}]);