"use strict";(self.webpackChunkdocs_v_3=self.webpackChunkdocs_v_3||[]).push([[6051],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),v=a,g=d["".concat(l,".").concat(v)]||d[v]||p[v]||i;return n?o.createElement(g,r(r({ref:t},u),{},{components:n})):o.createElement(g,r({ref:t},u))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var s=2;s<i;s++)r[s]=n[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9138:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const i={},r="Location",c={unversionedId:"how-to/location",id:"how-to/location",title:"Location",description:"Sending Location",source:"@site/docs/how-to/location.md",sourceDirName:"how-to",slug:"/how-to/location",permalink:"/docs/how-to/location",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/how-to/location.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Handle Incoming Call",permalink:"/docs/how-to/incoming-calls"},next:{title:"Manage Participants",permalink:"/docs/how-to/manage-participants"}},l={},s=[{value:"Sending Location",id:"sending-location",level:2},{value:"Receiving Location",id:"receiving-location",level:2},{value:"Listening to Live Locations",id:"listening-to-live-locations",level:2},{value:"Forcing Live Locations to Update",id:"forcing-live-locations-to-update",level:3}],u={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"location"},"Location"),(0,a.kt)("h2",{id:"sending-location"},"Sending Location"),(0,a.kt)("p",null,"[","[sendLocation]","]"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"    client.sendLocation(chatId, latitude, longitude, 'London!')\n")),(0,a.kt)("h2",{id:"receiving-location"},"Receiving Location"),(0,a.kt)("p",null,"Check the [","[Message]","] reference to learn how to extract the coordinates from a location message"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'    client.onMessage(message=> {\n        if(message.type==="location") {\n            //Using destructuring\n            const {\n                // The text associated with the location\n                loc,\n                //Latitude\n                lat,\n                //Longitude\n                lng\n            } = message\n        }\n    })\n')),(0,a.kt)("h2",{id:"listening-to-live-locations"},"Listening to Live Locations"),(0,a.kt)("p",null,"[","[onLiveLocation]","] fires a [","[LiveLocationChangedEvent]","] event. [","[onLiveLocation]","] requires a chat id to listen to so you need to detect exactly when a chat starts sharing a live location with your host account. This example detects when a live location is started and then registers a new callback to listen to updates in that live location session."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"    const liveLocationCallback = currentLiveLocation => {\n        console.log('Live location update', currentLiveLocation.id, currentLiveLocation.lat, currentLiveLocation.lng);\n    }\n    client.onMessage(message=> {\n        //This is how to detect when someone has started a live location with you\n        if(message.shareDuration){\n            client.onLiveLocation(message.from, liveLocationCallback)\n        }\n    })\n\n")),(0,a.kt)("h3",{id:"forcing-live-locations-to-update"},"Forcing Live Locations to Update"),(0,a.kt)("p",null,"The updates of live locations are very passive. If you require updates at regular intervals then you can force it using [","[forceUpdateLiveLocation]","]. It is recomended to keep an array of chat ids that have live location sessions and map through them at regular intervals"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"    await client.forceUpdateLiveLocation(chatId);\n\n    //or force update live locations of multiple chats\n    await Promise.all([\n        'chatId1',\n        'chatId2'\n    ].map(client.forceUpdateLiveLocation));\n")))}p.isMDXComponent=!0}}]);