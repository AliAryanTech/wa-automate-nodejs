"use strict";(self.webpackChunkdocs_v_3=self.webpackChunkdocs_v_3||[]).push([[4512],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),g=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=g(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=g(n),d=o,m=u["".concat(s,".").concat(d)]||u[d]||c[d]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var g=2;g<a;g++)i[g]=n[g];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4456:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>g});var r=n(7462),o=(n(7294),n(3905));const a={id:"logging_logging.log",title:"Variable: log",sidebar_label:"log",custom_edit_url:null},i=void 0,l={unversionedId:"api/variables/logging_logging.log",id:"api/variables/logging_logging.log",title:"Variable: log",description:"logging/logging.log",source:"@site/docs/api/variables/logging_logging.log.md",sourceDirName:"api/variables",slug:"/api/variables/logging_logging.log",permalink:"/docs/api/variables/logging_logging.log",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"logging_logging.log",title:"Variable: log",sidebar_label:"log",custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"screenshot",permalink:"/docs/api/variables/controllers_initializer.screenshot"},next:{title:"MessagePreprocessors",permalink:"/docs/api/variables/structures_preProcessors.MessagePreprocessors"}},s={},g=[],p={toc:g};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/api/modules/logging_logging"},"logging/logging"),".log"),(0,o.kt)("p",null,"\u2022 ",(0,o.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,o.kt)("strong",{parentName:"p"},"log"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"Logger")),(0,o.kt)("p",null,"You can access the log in your code and add your own custom transports\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/winstonjs/winston#transports"},"https://github.com/winstonjs/winston#transports"),"\nsee ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/winstonjs/winston#transports"},"Logger")," for more details. "),(0,o.kt)("p",null,"Here is an example of adding the GCP stackdriver transport:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"import { log } from '@open-wa/wa-automate'\nimport { LoggingWinston } from '@google-cloud/logging-winston';\n\nconst gcpTransport = new LoggingWinston({\n    projectId: 'your-project-id',\n    keyFilename: '/path/to/keyfile.json'\n  });\n\n...\nlog.add(\n gcpTransport\n)\n\n//Congrats! Now all of your session logs will also go to GCP Stackdriver\n")))}c.isMDXComponent=!0}}]);